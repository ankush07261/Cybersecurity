import socket
# import nmap
from datetime import datetime

# Get the target to scan
target = input("Enter the target IP or domain: ")

# Create a new Nmap object
# nm = nmap.PortScanner()

# Define the range of ports to scan
start_port = int(input("Enter the start port: "))
end_port = int(input("Enter the end port: "))

# Banner
print(f"Scanning target: {target}")
print(f"Scanning from port {start_port} to {end_port}")
print("Time started: ", datetime.now())
print("-" * 50)

# Nmap Scan
# def nmap_scan():
#     print(f"\nRunning Nmap scan on {target} for ports {start_port}-{end_port}")
#     nm.scan(target, f"{start_port}-{end_port}")
    
#     for host in nm.all_hosts():
#         print(f"\nHost: {host} ({nm[host].hostname()})")
#         print(f"State: {nm[host].state()}")
        
#         for proto in nm[host].all_protocols():
#             print(f"Protocol: {proto}")
            
#             lport = nm[host][proto].keys()
#             for port in sorted(lport):
#                 print(f"Port: {port}\tState: {nm[host][proto][port]['state']}")

# Socket-based Port Scan
def port_scan(port):
    try:
        # Create a socket object
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        
        # Attempt to connect to the target on the port
        result = sock.connect_ex((target, port))
        
        # If the port is open, result will be 0
        if result == 0:
            print(f"Port {port} is open")
        sock.close()
    
    except Exception as e:
        print(f"Error scanning port {port}: {e}")

# Perform both socket and nmap scans
for port in range(start_port, end_port + 1):
    port_scan(port)

# nmap_scan()

print("\nScan complete!")
print("Time finished: ", datetime.now())
